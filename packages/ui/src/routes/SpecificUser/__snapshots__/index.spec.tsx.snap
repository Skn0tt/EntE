// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SpecificUser renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SpecificUser
    classes={Object {}}
    fullScreen={true}
    getUser={[Function]}
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 2,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "",
          "search": "",
          "state": Object {},
        },
        "push": [Function],
        "replace": [Function],
      }
    }
    loading={false}
    location={
      Object {
        "hash": "",
        "key": "",
        "pathname": "",
        "search": "",
        "state": Object {},
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {
          "userId": "fdas90ß9sß0",
        },
        "path": "",
        "url": "",
      }
    }
    requestUser={[Function]}
    staticContext={Object {}}
    students={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <UNDEFINED>
          <WithStyles(DialogTitle)>
            Horst Hansen
          </WithStyles(DialogTitle)>
          <WithStyles(DialogContent)>
            <WithStyles(DialogContentText)>
              ID
              : 
              fdas90ß9sß0
               
              <br />
              Email
              : 
              hort@hansen.de
               
              <br />
              Rolle
              : 
              student
               
              <br />
            </WithStyles(DialogContentText)>
            <WithStyles(Divider) />
            <Connect(WithStyles(Component))
              userId="fdas90ß9sß0"
            />
            <WithStyles(Divider) />
            <Connect(WithStyles(Component))
              userId="fdas90ß9sß0"
            />
            <WithStyles(Divider) />
            <Connect(WithStyles(Component))
              userId="fdas90ß9sß0"
            />
          </WithStyles(DialogContent)>
        </UNDEFINED>,
        <WithStyles(DialogActions)>
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            size="small"
          >
            Schließen
          </WithStyles(Button)>
        </WithStyles(DialogActions)>,
      ],
      "fullScreen": true,
      "onClose": [Function],
      "open": true,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <WithStyles(DialogTitle)>
              Horst Hansen
            </WithStyles(DialogTitle)>,
            <WithStyles(DialogContent)>
              <WithStyles(DialogContentText)>
                ID
                : 
                fdas90ß9sß0
                 
                <br />
                Email
                : 
                hort@hansen.de
                 
                <br />
                Rolle
                : 
                student
                 
                <br />
              </WithStyles(DialogContentText)>
              <WithStyles(Divider) />
              <Connect(WithStyles(Component))
                userId="fdas90ß9sß0"
              />
              <WithStyles(Divider) />
              <Connect(WithStyles(Component))
                userId="fdas90ß9sß0"
              />
              <WithStyles(Divider) />
              <Connect(WithStyles(Component))
                userId="fdas90ß9sß0"
              />
            </WithStyles(DialogContent)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Horst Hansen",
            },
            "ref": null,
            "rendered": "Horst Hansen",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(DialogContentText)>
                  ID
                  : 
                  fdas90ß9sß0
                   
                  <br />
                  Email
                  : 
                  hort@hansen.de
                   
                  <br />
                  Rolle
                  : 
                  student
                   
                  <br />
                </WithStyles(DialogContentText)>,
                <WithStyles(Divider) />,
                <Connect(WithStyles(Component))
                  userId="fdas90ß9sß0"
                />,
                <WithStyles(Divider) />,
                <Connect(WithStyles(Component))
                  userId="fdas90ß9sß0"
                />,
                <WithStyles(Divider) />,
                <Connect(WithStyles(Component))
                  userId="fdas90ß9sß0"
                />,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    "ID",
                    ": ",
                    "fdas90ß9sß0",
                    " ",
                    <br />,
                    "Email",
                    ": ",
                    "hort@hansen.de",
                    " ",
                    <br />,
                    "Rolle",
                    ": ",
                    "student",
                    " ",
                    <br />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "ID",
                  ": ",
                  "fdas90ß9sß0",
                  " ",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  "Email",
                  ": ",
                  "hort@hansen.de",
                  " ",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  "Rolle",
                  ": ",
                  "student",
                  " ",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "userId": "fdas90ß9sß0",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "userId": "fdas90ß9sß0",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "userId": "fdas90ß9sß0",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
            ],
            "type": [Function],
          },
        ],
        "type": Symbol(react.fragment),
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            size="small"
          >
            Schließen
          </WithStyles(Button)>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Schließen",
            "color": "primary",
            "onClick": [Function],
            "size": "small",
          },
          "ref": null,
          "rendered": "Schließen",
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <UNDEFINED>
            <WithStyles(DialogTitle)>
              Horst Hansen
            </WithStyles(DialogTitle)>
            <WithStyles(DialogContent)>
              <WithStyles(DialogContentText)>
                ID
                : 
                fdas90ß9sß0
                 
                <br />
                Email
                : 
                hort@hansen.de
                 
                <br />
                Rolle
                : 
                student
                 
                <br />
              </WithStyles(DialogContentText)>
              <WithStyles(Divider) />
              <Connect(WithStyles(Component))
                userId="fdas90ß9sß0"
              />
              <WithStyles(Divider) />
              <Connect(WithStyles(Component))
                userId="fdas90ß9sß0"
              />
              <WithStyles(Divider) />
              <Connect(WithStyles(Component))
                userId="fdas90ß9sß0"
              />
            </WithStyles(DialogContent)>
          </UNDEFINED>,
          <WithStyles(DialogActions)>
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              size="small"
            >
              Schließen
            </WithStyles(Button)>
          </WithStyles(DialogActions)>,
        ],
        "fullScreen": true,
        "onClose": [Function],
        "open": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <WithStyles(DialogTitle)>
                Horst Hansen
              </WithStyles(DialogTitle)>,
              <WithStyles(DialogContent)>
                <WithStyles(DialogContentText)>
                  ID
                  : 
                  fdas90ß9sß0
                   
                  <br />
                  Email
                  : 
                  hort@hansen.de
                   
                  <br />
                  Rolle
                  : 
                  student
                   
                  <br />
                </WithStyles(DialogContentText)>
                <WithStyles(Divider) />
                <Connect(WithStyles(Component))
                  userId="fdas90ß9sß0"
                />
                <WithStyles(Divider) />
                <Connect(WithStyles(Component))
                  userId="fdas90ß9sß0"
                />
                <WithStyles(Divider) />
                <Connect(WithStyles(Component))
                  userId="fdas90ß9sß0"
                />
              </WithStyles(DialogContent)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Horst Hansen",
              },
              "ref": null,
              "rendered": "Horst Hansen",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <WithStyles(DialogContentText)>
                    ID
                    : 
                    fdas90ß9sß0
                     
                    <br />
                    Email
                    : 
                    hort@hansen.de
                     
                    <br />
                    Rolle
                    : 
                    student
                     
                    <br />
                  </WithStyles(DialogContentText)>,
                  <WithStyles(Divider) />,
                  <Connect(WithStyles(Component))
                    userId="fdas90ß9sß0"
                  />,
                  <WithStyles(Divider) />,
                  <Connect(WithStyles(Component))
                    userId="fdas90ß9sß0"
                  />,
                  <WithStyles(Divider) />,
                  <Connect(WithStyles(Component))
                    userId="fdas90ß9sß0"
                  />,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      "ID",
                      ": ",
                      "fdas90ß9sß0",
                      " ",
                      <br />,
                      "Email",
                      ": ",
                      "hort@hansen.de",
                      " ",
                      <br />,
                      "Rolle",
                      ": ",
                      "student",
                      " ",
                      <br />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    "ID",
                    ": ",
                    "fdas90ß9sß0",
                    " ",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "br",
                    },
                    "Email",
                    ": ",
                    "hort@hansen.de",
                    " ",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "br",
                    },
                    "Rolle",
                    ": ",
                    "student",
                    " ",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "br",
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "userId": "fdas90ß9sß0",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "userId": "fdas90ß9sß0",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "userId": "fdas90ß9sß0",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                false,
              ],
              "type": [Function],
            },
          ],
          "type": Symbol(react.fragment),
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              size="small"
            >
              Schließen
            </WithStyles(Button)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Schließen",
              "color": "primary",
              "onClick": [Function],
              "size": "small",
            },
            "ref": null,
            "rendered": "Schließen",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
