// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Users renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Users
    classes={Object {}}
    getUsers={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 2,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "",
          "search": "",
          "state": Object {},
        },
        "push": [Function],
        "replace": [Function],
      }
    }
    location={
      Object {
        "hash": "",
        "key": "",
        "pathname": "",
        "search": "",
        "state": Object {},
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {},
        "path": "",
        "url": "",
      }
    }
    staticContext={Object {}}
    users={
      Array [
        Immutable.Record {
          "id": "mystupidid",
          "username": "simon",
          "children": Array [],
          "displayname": "Simon",
          "email": "email@emai.com",
          "isAdult": false,
          "role": "student",
          "childrenIds": Array [],
          "graduationYear": null,
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <WithStyles(Connect(WithTheme(WithWidth(WithMobileDialog))))
          onClose={[Function]}
          show={false}
        />,
        <UserTable
          extract={[Function]}
          extractId={[Function]}
          headers={
            Array [
              Object {
                "name": "Username",
                "options": Object {
                  "filter": false,
                },
              },
              Object {
                "name": "Displayname",
                "options": Object {
                  "filter": false,
                },
              },
              Object {
                "name": "Email",
                "options": Object {
                  "filter": false,
                },
              },
              Object {
                "name": "Role",
              },
            ]
          }
          items={
            Array [
              Immutable.Record {
                "id": "mystupidid",
                "username": "simon",
                "children": Array [],
                "displayname": "Simon",
                "email": "email@emai.com",
                "isAdult": false,
                "role": "student",
                "childrenIds": Array [],
                "graduationYear": null,
              },
            ]
          }
          onClick={[Function]}
        />,
        <WithStyles(Button)
          color="primary"
          onClick={[Function]}
          variant="fab"
        >
          <pure(AddIcon) />
        </WithStyles(Button)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "onClose": [Function],
          "show": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "extract": [Function],
          "extractId": [Function],
          "headers": Array [
            Object {
              "name": "Username",
              "options": Object {
                "filter": false,
              },
            },
            Object {
              "name": "Displayname",
              "options": Object {
                "filter": false,
              },
            },
            Object {
              "name": "Email",
              "options": Object {
                "filter": false,
              },
            },
            Object {
              "name": "Role",
            },
          ],
          "items": Array [
            Immutable.Record {
              "id": "mystupidid",
              "username": "simon",
              "children": Array [],
              "displayname": "Simon",
              "email": "email@emai.com",
              "isAdult": false,
              "role": "student",
              "childrenIds": Array [],
              "graduationYear": null,
            },
          ],
          "onClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <pure(AddIcon) />,
          "className": undefined,
          "color": "primary",
          "onClick": [Function],
          "variant": "fab",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <WithStyles(Connect(WithTheme(WithWidth(WithMobileDialog))))
            onClose={[Function]}
            show={false}
          />,
          <UserTable
            extract={[Function]}
            extractId={[Function]}
            headers={
              Array [
                Object {
                  "name": "Username",
                  "options": Object {
                    "filter": false,
                  },
                },
                Object {
                  "name": "Displayname",
                  "options": Object {
                    "filter": false,
                  },
                },
                Object {
                  "name": "Email",
                  "options": Object {
                    "filter": false,
                  },
                },
                Object {
                  "name": "Role",
                },
              ]
            }
            items={
              Array [
                Immutable.Record {
                  "id": "mystupidid",
                  "username": "simon",
                  "children": Array [],
                  "displayname": "Simon",
                  "email": "email@emai.com",
                  "isAdult": false,
                  "role": "student",
                  "childrenIds": Array [],
                  "graduationYear": null,
                },
              ]
            }
            onClick={[Function]}
          />,
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="fab"
          >
            <pure(AddIcon) />
          </WithStyles(Button)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onClose": [Function],
            "show": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "extract": [Function],
            "extractId": [Function],
            "headers": Array [
              Object {
                "name": "Username",
                "options": Object {
                  "filter": false,
                },
              },
              Object {
                "name": "Displayname",
                "options": Object {
                  "filter": false,
                },
              },
              Object {
                "name": "Email",
                "options": Object {
                  "filter": false,
                },
              },
              Object {
                "name": "Role",
              },
            ],
            "items": Array [
              Immutable.Record {
                "id": "mystupidid",
                "username": "simon",
                "children": Array [],
                "displayname": "Simon",
                "email": "email@emai.com",
                "isAdult": false,
                "role": "student",
                "childrenIds": Array [],
                "graduationYear": null,
              },
            ],
            "onClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <pure(AddIcon) />,
            "className": undefined,
            "color": "primary",
            "onClick": [Function],
            "variant": "fab",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
