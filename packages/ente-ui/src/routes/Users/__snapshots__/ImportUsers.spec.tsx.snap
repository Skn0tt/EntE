// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ImportUsers renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ImportUsers
    addMessage={[MockFunction]}
    createUsers={[MockFunction]}
    fullScreen={true}
    onClose={[MockFunction]}
    show={true}
    usernames={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(Grid)
          container={true}
          direction="column"
        >
          <WithStyles(Grid)
            item={true}
            xs={12}
          >
            <UNDEFINED
              accept="text/csv"
              className="dropzone"
              onDrop={[Function]}
            >
              Drop a .csv file here.
            </UNDEFINED>
          </WithStyles(Grid)>
          <WithStyles(Grid)
            item={true}
            xs={12}
          >
            <WithStyles(SignedAvatar)
              signed={false}
            />
          </WithStyles(Grid)>
        </WithStyles(Grid)>,
        <WithStyles(DialogActions)>
          <WithStyles(Button)
            className="close"
            color="secondary"
            onClick={[Function]}
          >
            Close
          </WithStyles(Button)>
          <WithStyles(Button)
            className="submit"
            color="primary"
            disabled={true}
            onClick={[Function]}
          >
            Import
          </WithStyles(Button)>
        </WithStyles(DialogActions)>,
      ],
      "fullScreen": true,
      "onClose": [Function],
      "open": true,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Grid)
              item={true}
              xs={12}
            >
              <UNDEFINED
                accept="text/csv"
                className="dropzone"
                onDrop={[Function]}
              >
                Drop a .csv file here.
              </UNDEFINED>
            </WithStyles(Grid)>,
            <WithStyles(Grid)
              item={true}
              xs={12}
            >
              <WithStyles(SignedAvatar)
                signed={false}
              />
            </WithStyles(Grid)>,
          ],
          "container": true,
          "direction": "column",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <UNDEFINED
                accept="text/csv"
                className="dropzone"
                onDrop={[Function]}
              >
                Drop a .csv file here.
              </UNDEFINED>,
              "item": true,
              "xs": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "accept": "text/csv",
                "children": "Drop a .csv file here.",
                "className": "dropzone",
                "onDrop": [Function],
              },
              "ref": null,
              "rendered": "Drop a .csv file here.",
              "type": undefined,
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(SignedAvatar)
                signed={false}
              />,
              "item": true,
              "xs": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "signed": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Button)
              className="close"
              color="secondary"
              onClick={[Function]}
            >
              Close
            </WithStyles(Button)>,
            <WithStyles(Button)
              className="submit"
              color="primary"
              disabled={true}
              onClick={[Function]}
            >
              Import
            </WithStyles(Button)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Close",
              "className": "close",
              "color": "secondary",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Close",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Import",
              "className": "submit",
              "color": "primary",
              "disabled": true,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Import",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Grid)
            container={true}
            direction="column"
          >
            <WithStyles(Grid)
              item={true}
              xs={12}
            >
              <UNDEFINED
                accept="text/csv"
                className="dropzone"
                onDrop={[Function]}
              >
                Drop a .csv file here.
              </UNDEFINED>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              xs={12}
            >
              <WithStyles(SignedAvatar)
                signed={false}
              />
            </WithStyles(Grid)>
          </WithStyles(Grid)>,
          <WithStyles(DialogActions)>
            <WithStyles(Button)
              className="close"
              color="secondary"
              onClick={[Function]}
            >
              Close
            </WithStyles(Button)>
            <WithStyles(Button)
              className="submit"
              color="primary"
              disabled={true}
              onClick={[Function]}
            >
              Import
            </WithStyles(Button)>
          </WithStyles(DialogActions)>,
        ],
        "fullScreen": true,
        "onClose": [Function],
        "open": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Grid)
                item={true}
                xs={12}
              >
                <UNDEFINED
                  accept="text/csv"
                  className="dropzone"
                  onDrop={[Function]}
                >
                  Drop a .csv file here.
                </UNDEFINED>
              </WithStyles(Grid)>,
              <WithStyles(Grid)
                item={true}
                xs={12}
              >
                <WithStyles(SignedAvatar)
                  signed={false}
                />
              </WithStyles(Grid)>,
            ],
            "container": true,
            "direction": "column",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <UNDEFINED
                  accept="text/csv"
                  className="dropzone"
                  onDrop={[Function]}
                >
                  Drop a .csv file here.
                </UNDEFINED>,
                "item": true,
                "xs": 12,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "accept": "text/csv",
                  "children": "Drop a .csv file here.",
                  "className": "dropzone",
                  "onDrop": [Function],
                },
                "ref": null,
                "rendered": "Drop a .csv file here.",
                "type": undefined,
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(SignedAvatar)
                  signed={false}
                />,
                "item": true,
                "xs": 12,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "signed": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Button)
                className="close"
                color="secondary"
                onClick={[Function]}
              >
                Close
              </WithStyles(Button)>,
              <WithStyles(Button)
                className="submit"
                color="primary"
                disabled={true}
                onClick={[Function]}
              >
                Import
              </WithStyles(Button)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Close",
                "className": "close",
                "color": "secondary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Close",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Import",
                "className": "submit",
                "color": "primary",
                "disabled": true,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Import",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
