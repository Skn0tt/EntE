// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChildrenInput renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChildrenInput
    classes={Object {}}
    onChange={[Function]}
    students={
      Array [
        Immutable.User {
          "_id": "fdas90ß9sß0",
          "username": "hhansen",
          "displayname": "Horst Hansen",
          "email": "hort@hansen.de",
          "role": "student",
          "isAdult": false,
          "children": Array [],
        },
        Immutable.User {
          "_id": "jkldsfjlk",
          "username": "hball",
          "displayname": "Hanni Ball",
          "email": "hanni@ball.de",
          "role": "student",
          "isAdult": false,
          "children": Array [],
        },
      ]
    }
  >
    Immutable.User {
      "_id": "fdas90ß9sß0",
      "username": "hhansen",
      "displayname": "Horst Hansen",
      "email": "hort@hansen.de",
      "role": "student",
      "isAdult": false,
      "children": Array [],
    }
  </ChildrenInput>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(GridWrapper)
          item={true}
        >
          <WithStyles(Typography)
            variant="title"
          >
            Kinder
          </WithStyles(Typography)>
        </WithStyles(GridWrapper)>,
        <WithStyles(GridWrapper)
          item={true}
        >
          <WithStyles(List)>
            <WithStyles(ListItem)>
              <WithStyles(ListItemText)
                primary="Horst Hansen"
              />
              <WithStyles(ListItemSecondaryAction)>
                <WithStyles(IconButton)
                  onClick={[Function]}
                >
                  <pure(Delete) />
                </WithStyles(IconButton)>
              </WithStyles(ListItemSecondaryAction)>
            </WithStyles(ListItem)>
          </WithStyles(List)>
        </WithStyles(GridWrapper)>,
        <WithStyles(GridWrapper)
          container={true}
          item={true}
        >
          <WithStyles(GridWrapper)
            item={true}
            xs={11}
          >
            <SearchableDropdownUser
              helperText="Kinder Hinzufügen"
              includeItem={[Function]}
              itemToString={[Function]}
              items={
                Array [
                  Immutable.User {
                    "_id": "jkldsfjlk",
                    "username": "hball",
                    "displayname": "Hanni Ball",
                    "email": "hanni@ball.de",
                    "role": "student",
                    "isAdult": false,
                    "children": Array [],
                  },
                ]
              }
              label="Kind"
              onChange={[Function]}
            />
          </WithStyles(GridWrapper)>
          <WithStyles(GridWrapper)
            item={true}
            xs={1}
          >
            <WithStyles(Button)
              className="add"
              disabled={false}
              mini={true}
              onClick={[Function]}
              variant="fab"
            >
              <pure(Add) />
            </WithStyles(Button)>
          </WithStyles(GridWrapper)>
        </WithStyles(GridWrapper)>,
      ],
      "container": true,
      "direction": "column",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Typography)
            variant="title"
          >
            Kinder
          </WithStyles(Typography)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Kinder",
            "variant": "title",
          },
          "ref": null,
          "rendered": "Kinder",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(List)>
            <WithStyles(ListItem)>
              <WithStyles(ListItemText)
                primary="Horst Hansen"
              />
              <WithStyles(ListItemSecondaryAction)>
                <WithStyles(IconButton)
                  onClick={[Function]}
                >
                  <pure(Delete) />
                </WithStyles(IconButton)>
              </WithStyles(ListItemSecondaryAction)>
            </WithStyles(ListItem)>
          </WithStyles(List)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(ListItem)>
                <WithStyles(ListItemText)
                  primary="Horst Hansen"
                />
                <WithStyles(ListItemSecondaryAction)>
                  <WithStyles(IconButton)
                    onClick={[Function]}
                  >
                    <pure(Delete) />
                  </WithStyles(IconButton)>
                </WithStyles(ListItemSecondaryAction)>
              </WithStyles(ListItem)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <WithStyles(ListItemText)
                    primary="Horst Hansen"
                  />,
                  <WithStyles(ListItemSecondaryAction)>
                    <WithStyles(IconButton)
                      onClick={[Function]}
                    >
                      <pure(Delete) />
                    </WithStyles(IconButton)>
                  </WithStyles(ListItemSecondaryAction)>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "primary": "Horst Hansen",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(IconButton)
                      onClick={[Function]}
                    >
                      <pure(Delete) />
                    </WithStyles(IconButton)>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <pure(Delete) />,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(GridWrapper)
              item={true}
              xs={11}
            >
              <SearchableDropdownUser
                helperText="Kinder Hinzufügen"
                includeItem={[Function]}
                itemToString={[Function]}
                items={
                  Array [
                    Immutable.User {
                      "_id": "jkldsfjlk",
                      "username": "hball",
                      "displayname": "Hanni Ball",
                      "email": "hanni@ball.de",
                      "role": "student",
                      "isAdult": false,
                      "children": Array [],
                    },
                  ]
                }
                label="Kind"
                onChange={[Function]}
              />
            </WithStyles(GridWrapper)>,
            <WithStyles(GridWrapper)
              item={true}
              xs={1}
            >
              <WithStyles(Button)
                className="add"
                disabled={false}
                mini={true}
                onClick={[Function]}
                variant="fab"
              >
                <pure(Add) />
              </WithStyles(Button)>
            </WithStyles(GridWrapper)>,
          ],
          "container": true,
          "item": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <SearchableDropdownUser
                helperText="Kinder Hinzufügen"
                includeItem={[Function]}
                itemToString={[Function]}
                items={
                  Array [
                    Immutable.User {
                      "_id": "jkldsfjlk",
                      "username": "hball",
                      "displayname": "Hanni Ball",
                      "email": "hanni@ball.de",
                      "role": "student",
                      "isAdult": false,
                      "children": Array [],
                    },
                  ]
                }
                label="Kind"
                onChange={[Function]}
              />,
              "item": true,
              "xs": 11,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "helperText": "Kinder Hinzufügen",
                "includeItem": [Function],
                "itemToString": [Function],
                "items": Array [
                  Immutable.User {
                    "_id": "jkldsfjlk",
                    "username": "hball",
                    "displayname": "Hanni Ball",
                    "email": "hanni@ball.de",
                    "role": "student",
                    "isAdult": false,
                    "children": Array [],
                  },
                ],
                "label": "Kind",
                "onChange": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Button)
                className="add"
                disabled={false}
                mini={true}
                onClick={[Function]}
                variant="fab"
              >
                <pure(Add) />
              </WithStyles(Button)>,
              "item": true,
              "xs": 1,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <pure(Add) />,
                "className": "add",
                "disabled": false,
                "mini": true,
                "onClick": [Function],
                "variant": "fab",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(GridWrapper)
            item={true}
          >
            <WithStyles(Typography)
              variant="title"
            >
              Kinder
            </WithStyles(Typography)>
          </WithStyles(GridWrapper)>,
          <WithStyles(GridWrapper)
            item={true}
          >
            <WithStyles(List)>
              <WithStyles(ListItem)>
                <WithStyles(ListItemText)
                  primary="Horst Hansen"
                />
                <WithStyles(ListItemSecondaryAction)>
                  <WithStyles(IconButton)
                    onClick={[Function]}
                  >
                    <pure(Delete) />
                  </WithStyles(IconButton)>
                </WithStyles(ListItemSecondaryAction)>
              </WithStyles(ListItem)>
            </WithStyles(List)>
          </WithStyles(GridWrapper)>,
          <WithStyles(GridWrapper)
            container={true}
            item={true}
          >
            <WithStyles(GridWrapper)
              item={true}
              xs={11}
            >
              <SearchableDropdownUser
                helperText="Kinder Hinzufügen"
                includeItem={[Function]}
                itemToString={[Function]}
                items={
                  Array [
                    Immutable.User {
                      "_id": "jkldsfjlk",
                      "username": "hball",
                      "displayname": "Hanni Ball",
                      "email": "hanni@ball.de",
                      "role": "student",
                      "isAdult": false,
                      "children": Array [],
                    },
                  ]
                }
                label="Kind"
                onChange={[Function]}
              />
            </WithStyles(GridWrapper)>
            <WithStyles(GridWrapper)
              item={true}
              xs={1}
            >
              <WithStyles(Button)
                className="add"
                disabled={false}
                mini={true}
                onClick={[Function]}
                variant="fab"
              >
                <pure(Add) />
              </WithStyles(Button)>
            </WithStyles(GridWrapper)>
          </WithStyles(GridWrapper)>,
        ],
        "container": true,
        "direction": "column",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Typography)
              variant="title"
            >
              Kinder
            </WithStyles(Typography)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Kinder",
              "variant": "title",
            },
            "ref": null,
            "rendered": "Kinder",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(List)>
              <WithStyles(ListItem)>
                <WithStyles(ListItemText)
                  primary="Horst Hansen"
                />
                <WithStyles(ListItemSecondaryAction)>
                  <WithStyles(IconButton)
                    onClick={[Function]}
                  >
                    <pure(Delete) />
                  </WithStyles(IconButton)>
                </WithStyles(ListItemSecondaryAction)>
              </WithStyles(ListItem)>
            </WithStyles(List)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(ListItem)>
                  <WithStyles(ListItemText)
                    primary="Horst Hansen"
                  />
                  <WithStyles(ListItemSecondaryAction)>
                    <WithStyles(IconButton)
                      onClick={[Function]}
                    >
                      <pure(Delete) />
                    </WithStyles(IconButton)>
                  </WithStyles(ListItemSecondaryAction)>
                </WithStyles(ListItem)>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "0",
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <WithStyles(ListItemText)
                      primary="Horst Hansen"
                    />,
                    <WithStyles(ListItemSecondaryAction)>
                      <WithStyles(IconButton)
                        onClick={[Function]}
                      >
                        <pure(Delete) />
                      </WithStyles(IconButton)>
                    </WithStyles(ListItemSecondaryAction)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "primary": "Horst Hansen",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <WithStyles(IconButton)
                        onClick={[Function]}
                      >
                        <pure(Delete) />
                      </WithStyles(IconButton)>,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": <pure(Delete) />,
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {},
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(GridWrapper)
                item={true}
                xs={11}
              >
                <SearchableDropdownUser
                  helperText="Kinder Hinzufügen"
                  includeItem={[Function]}
                  itemToString={[Function]}
                  items={
                    Array [
                      Immutable.User {
                        "_id": "jkldsfjlk",
                        "username": "hball",
                        "displayname": "Hanni Ball",
                        "email": "hanni@ball.de",
                        "role": "student",
                        "isAdult": false,
                        "children": Array [],
                      },
                    ]
                  }
                  label="Kind"
                  onChange={[Function]}
                />
              </WithStyles(GridWrapper)>,
              <WithStyles(GridWrapper)
                item={true}
                xs={1}
              >
                <WithStyles(Button)
                  className="add"
                  disabled={false}
                  mini={true}
                  onClick={[Function]}
                  variant="fab"
                >
                  <pure(Add) />
                </WithStyles(Button)>
              </WithStyles(GridWrapper)>,
            ],
            "container": true,
            "item": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <SearchableDropdownUser
                  helperText="Kinder Hinzufügen"
                  includeItem={[Function]}
                  itemToString={[Function]}
                  items={
                    Array [
                      Immutable.User {
                        "_id": "jkldsfjlk",
                        "username": "hball",
                        "displayname": "Hanni Ball",
                        "email": "hanni@ball.de",
                        "role": "student",
                        "isAdult": false,
                        "children": Array [],
                      },
                    ]
                  }
                  label="Kind"
                  onChange={[Function]}
                />,
                "item": true,
                "xs": 11,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "helperText": "Kinder Hinzufügen",
                  "includeItem": [Function],
                  "itemToString": [Function],
                  "items": Array [
                    Immutable.User {
                      "_id": "jkldsfjlk",
                      "username": "hball",
                      "displayname": "Hanni Ball",
                      "email": "hanni@ball.de",
                      "role": "student",
                      "isAdult": false,
                      "children": Array [],
                    },
                  ],
                  "label": "Kind",
                  "onChange": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(Button)
                  className="add"
                  disabled={false}
                  mini={true}
                  onClick={[Function]}
                  variant="fab"
                >
                  <pure(Add) />
                </WithStyles(Button)>,
                "item": true,
                "xs": 1,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <pure(Add) />,
                  "className": "add",
                  "disabled": false,
                  "mini": true,
                  "onClick": [Function],
                  "variant": "fab",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`ChildrenInput renders when no additional users are available 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChildrenInput
    classes={Object {}}
    onChange={[Function]}
    students={
      Array [
        Immutable.User {
          "_id": "fdas90ß9sß0",
          "username": "hhansen",
          "displayname": "Horst Hansen",
          "email": "hort@hansen.de",
          "role": "student",
          "isAdult": false,
          "children": Array [],
        },
      ]
    }
  >
    Immutable.User {
      "_id": "fdas90ß9sß0",
      "username": "hhansen",
      "displayname": "Horst Hansen",
      "email": "hort@hansen.de",
      "role": "student",
      "isAdult": false,
      "children": Array [],
    }
  </ChildrenInput>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(GridWrapper)
          item={true}
        >
          <WithStyles(Typography)
            variant="title"
          >
            Kinder
          </WithStyles(Typography)>
        </WithStyles(GridWrapper)>,
        <WithStyles(GridWrapper)
          item={true}
        >
          <WithStyles(List)>
            <WithStyles(ListItem)>
              <WithStyles(ListItemText)
                primary="Horst Hansen"
              />
              <WithStyles(ListItemSecondaryAction)>
                <WithStyles(IconButton)
                  onClick={[Function]}
                >
                  <pure(Delete) />
                </WithStyles(IconButton)>
              </WithStyles(ListItemSecondaryAction)>
            </WithStyles(ListItem)>
          </WithStyles(List)>
        </WithStyles(GridWrapper)>,
        <WithStyles(GridWrapper)
          container={true}
          item={true}
        >
          <WithStyles(GridWrapper)
            item={true}
            xs={11}
          >
            <SearchableDropdownUser
              helperText="Kinder Hinzufügen"
              includeItem={[Function]}
              itemToString={[Function]}
              items={Array []}
              label="Kind"
              onChange={[Function]}
            />
          </WithStyles(GridWrapper)>
          <WithStyles(GridWrapper)
            item={true}
            xs={1}
          >
            <WithStyles(Button)
              className="add"
              disabled={true}
              mini={true}
              onClick={[Function]}
              variant="fab"
            >
              <pure(Add) />
            </WithStyles(Button)>
          </WithStyles(GridWrapper)>
        </WithStyles(GridWrapper)>,
      ],
      "container": true,
      "direction": "column",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Typography)
            variant="title"
          >
            Kinder
          </WithStyles(Typography)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Kinder",
            "variant": "title",
          },
          "ref": null,
          "rendered": "Kinder",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(List)>
            <WithStyles(ListItem)>
              <WithStyles(ListItemText)
                primary="Horst Hansen"
              />
              <WithStyles(ListItemSecondaryAction)>
                <WithStyles(IconButton)
                  onClick={[Function]}
                >
                  <pure(Delete) />
                </WithStyles(IconButton)>
              </WithStyles(ListItemSecondaryAction)>
            </WithStyles(ListItem)>
          </WithStyles(List)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(ListItem)>
                <WithStyles(ListItemText)
                  primary="Horst Hansen"
                />
                <WithStyles(ListItemSecondaryAction)>
                  <WithStyles(IconButton)
                    onClick={[Function]}
                  >
                    <pure(Delete) />
                  </WithStyles(IconButton)>
                </WithStyles(ListItemSecondaryAction)>
              </WithStyles(ListItem)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <WithStyles(ListItemText)
                    primary="Horst Hansen"
                  />,
                  <WithStyles(ListItemSecondaryAction)>
                    <WithStyles(IconButton)
                      onClick={[Function]}
                    >
                      <pure(Delete) />
                    </WithStyles(IconButton)>
                  </WithStyles(ListItemSecondaryAction)>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "primary": "Horst Hansen",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(IconButton)
                      onClick={[Function]}
                    >
                      <pure(Delete) />
                    </WithStyles(IconButton)>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <pure(Delete) />,
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(GridWrapper)
              item={true}
              xs={11}
            >
              <SearchableDropdownUser
                helperText="Kinder Hinzufügen"
                includeItem={[Function]}
                itemToString={[Function]}
                items={Array []}
                label="Kind"
                onChange={[Function]}
              />
            </WithStyles(GridWrapper)>,
            <WithStyles(GridWrapper)
              item={true}
              xs={1}
            >
              <WithStyles(Button)
                className="add"
                disabled={true}
                mini={true}
                onClick={[Function]}
                variant="fab"
              >
                <pure(Add) />
              </WithStyles(Button)>
            </WithStyles(GridWrapper)>,
          ],
          "container": true,
          "item": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <SearchableDropdownUser
                helperText="Kinder Hinzufügen"
                includeItem={[Function]}
                itemToString={[Function]}
                items={Array []}
                label="Kind"
                onChange={[Function]}
              />,
              "item": true,
              "xs": 11,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "helperText": "Kinder Hinzufügen",
                "includeItem": [Function],
                "itemToString": [Function],
                "items": Array [],
                "label": "Kind",
                "onChange": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Button)
                className="add"
                disabled={true}
                mini={true}
                onClick={[Function]}
                variant="fab"
              >
                <pure(Add) />
              </WithStyles(Button)>,
              "item": true,
              "xs": 1,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <pure(Add) />,
                "className": "add",
                "disabled": true,
                "mini": true,
                "onClick": [Function],
                "variant": "fab",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(GridWrapper)
            item={true}
          >
            <WithStyles(Typography)
              variant="title"
            >
              Kinder
            </WithStyles(Typography)>
          </WithStyles(GridWrapper)>,
          <WithStyles(GridWrapper)
            item={true}
          >
            <WithStyles(List)>
              <WithStyles(ListItem)>
                <WithStyles(ListItemText)
                  primary="Horst Hansen"
                />
                <WithStyles(ListItemSecondaryAction)>
                  <WithStyles(IconButton)
                    onClick={[Function]}
                  >
                    <pure(Delete) />
                  </WithStyles(IconButton)>
                </WithStyles(ListItemSecondaryAction)>
              </WithStyles(ListItem)>
            </WithStyles(List)>
          </WithStyles(GridWrapper)>,
          <WithStyles(GridWrapper)
            container={true}
            item={true}
          >
            <WithStyles(GridWrapper)
              item={true}
              xs={11}
            >
              <SearchableDropdownUser
                helperText="Kinder Hinzufügen"
                includeItem={[Function]}
                itemToString={[Function]}
                items={Array []}
                label="Kind"
                onChange={[Function]}
              />
            </WithStyles(GridWrapper)>
            <WithStyles(GridWrapper)
              item={true}
              xs={1}
            >
              <WithStyles(Button)
                className="add"
                disabled={true}
                mini={true}
                onClick={[Function]}
                variant="fab"
              >
                <pure(Add) />
              </WithStyles(Button)>
            </WithStyles(GridWrapper)>
          </WithStyles(GridWrapper)>,
        ],
        "container": true,
        "direction": "column",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Typography)
              variant="title"
            >
              Kinder
            </WithStyles(Typography)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Kinder",
              "variant": "title",
            },
            "ref": null,
            "rendered": "Kinder",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(List)>
              <WithStyles(ListItem)>
                <WithStyles(ListItemText)
                  primary="Horst Hansen"
                />
                <WithStyles(ListItemSecondaryAction)>
                  <WithStyles(IconButton)
                    onClick={[Function]}
                  >
                    <pure(Delete) />
                  </WithStyles(IconButton)>
                </WithStyles(ListItemSecondaryAction)>
              </WithStyles(ListItem)>
            </WithStyles(List)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(ListItem)>
                  <WithStyles(ListItemText)
                    primary="Horst Hansen"
                  />
                  <WithStyles(ListItemSecondaryAction)>
                    <WithStyles(IconButton)
                      onClick={[Function]}
                    >
                      <pure(Delete) />
                    </WithStyles(IconButton)>
                  </WithStyles(ListItemSecondaryAction)>
                </WithStyles(ListItem)>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "0",
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <WithStyles(ListItemText)
                      primary="Horst Hansen"
                    />,
                    <WithStyles(ListItemSecondaryAction)>
                      <WithStyles(IconButton)
                        onClick={[Function]}
                      >
                        <pure(Delete) />
                      </WithStyles(IconButton)>
                    </WithStyles(ListItemSecondaryAction)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "primary": "Horst Hansen",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <WithStyles(IconButton)
                        onClick={[Function]}
                      >
                        <pure(Delete) />
                      </WithStyles(IconButton)>,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": <pure(Delete) />,
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {},
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(GridWrapper)
                item={true}
                xs={11}
              >
                <SearchableDropdownUser
                  helperText="Kinder Hinzufügen"
                  includeItem={[Function]}
                  itemToString={[Function]}
                  items={Array []}
                  label="Kind"
                  onChange={[Function]}
                />
              </WithStyles(GridWrapper)>,
              <WithStyles(GridWrapper)
                item={true}
                xs={1}
              >
                <WithStyles(Button)
                  className="add"
                  disabled={true}
                  mini={true}
                  onClick={[Function]}
                  variant="fab"
                >
                  <pure(Add) />
                </WithStyles(Button)>
              </WithStyles(GridWrapper)>,
            ],
            "container": true,
            "item": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <SearchableDropdownUser
                  helperText="Kinder Hinzufügen"
                  includeItem={[Function]}
                  itemToString={[Function]}
                  items={Array []}
                  label="Kind"
                  onChange={[Function]}
                />,
                "item": true,
                "xs": 11,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "helperText": "Kinder Hinzufügen",
                  "includeItem": [Function],
                  "itemToString": [Function],
                  "items": Array [],
                  "label": "Kind",
                  "onChange": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(Button)
                  className="add"
                  disabled={true}
                  mini={true}
                  onClick={[Function]}
                  variant="fab"
                >
                  <pure(Add) />
                </WithStyles(Button)>,
                "item": true,
                "xs": 1,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <pure(Add) />,
                  "className": "add",
                  "disabled": true,
                  "mini": true,
                  "onClick": [Function],
                  "variant": "fab",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
