variables:
  CONTAINER_BASE: registry.gitlab.com/skn0tt/ente
  CONTAINER_UI_TEST_IMAGE: $CONTAINER_BASE/ui:$CI_COMMIT_REF_NAME
  CONTAINER_UI_RELEASE_IMAGE: $CONTAINER_BASE/ui:latest
  CONTAINER_API_TEST_IMAGE: $CONTAINER_BASE/api:$CI_COMMIT_REF_NAME
  CONTAINER_API_RELEASE_IMAGE: $CONTAINER_BASE/api:latest
  CONTAINER_ROTATOR_TEST_IMAGE: $CONTAINER_BASE/rotator:$CI_COMMIT_REF_NAME
  CONTAINER_ROTATOR_RELEASE_IMAGE: $CONTAINER_BASE/rotator:latest
  CONTAINER_PROXY_TEST_IMAGE: $CONTAINER_BASE/nginx-proxy:$CI_COMMIT_REF_NAME
  CONTAINER_PROXY_RELEASE_IMAGE: $CONTAINER_BASE/nginx-proxy:latest
  DOCKER_HOST: dind:2375

stages:
  - build
  - test
  - docs
  - release

services:
- name: docker:stable-dind
  alias: dind

#
# Build
#
build:API:
  image: skn0tt/dind-make
  stage: build
  only:
    - master
  tags:
    - docker
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script:
    - cd packages/api
    - make build IMAGE_TAG=$CONTAINER_API_TEST_IMAGE
    - docker push $CONTAINER_API_TEST_IMAGE

build:UI:
  image: skn0tt/dind-make
  stage: build
  only:
    - master
  tags:
    - docker
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script:
    - cd packages/ui
    - make build IMAGE_TAG=$CONTAINER_UI_TEST_IMAGE
    - docker push $CONTAINER_UI_TEST_IMAGE

build:nginx-proxy:
  image: skn0tt/dind-make
  stage: build
  only:
    - master
  tags:
    - docker
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script:
    - cd packages/nginx-proxy
    - make build IMAGE_TAG=$CONTAINER_PROXY_TEST_IMAGE
    - docker push $CONTAINER_PROXY_TEST_IMAGE

build:rotator:
  image: skn0tt/dind-make
  stage: build
  only:
    - master
  tags:
    - docker
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script:
    - cd packages/rotator
    - make build IMAGE_TAG=$CONTAINER_ROTATOR_TEST_IMAGE
    - docker push $CONTAINER_ROTATOR_TEST_IMAGE

#
# Test
#

# Unit Tests
test:unit:
  image: node:9
  stage: test
  before_script:
    - yarn
  script:
    - yarn test:unit:ci
  artifacts:
    paths:
      - coverage/lcov-report/
      - junit.xml

# e2e Tests
test:e2e:
  image: circleci/node:9-browsers
  stage: test
  only:
    - master
  artifacts:
    paths:
      - screenshots/
      - e2e.xml
  variables:
    HOST: dind
    SMTP_HOST: smtp.ethereal.email
    SMTP_PORT: "587"
    SMTP_USER: louf4yh5lnkyg2h3@ethereal.email
    SMTP_PASSWORD: mWgCFb9JcJxdeKa6RE
    LETSENCRYPT_EMAIL: simoknott@gmail.com
    COMPOSE_PROJECT_NAME: ente
    BASE_URL: http://dind:80
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
    - yarn
  script:
    - docker-compose -f tests/docker-compose.yml up -d
    - tests/e2e.sh

# Docs
generate:docs:
  image: python
  stage: docs
  only:
    - master
  before_script:
    - pip install -r requirements.txt
  script:
    - mkdocs build
  artifacts:
    paths:
      - site/

# Docs
generate:allure-report:
  image: skn0tt/allure
  stage: docs
  variables:
    GIT_STRATEGY: none
  only:
    - master
  dependencies:
    - test:unit
    - test:e2e
  script:
    - allure generate ./
  artifacts:
    paths:
      - allure-report/

#
# Release
#
# Upload to Pages
pages:
  stage: release
  variables:
    GIT_STRATEGY: none
  dependencies:
    - test:unit
    - generate:docs
  before_script:
    - mkdir public
    - mkdir public/coverage public/docs
  script:
    - mv coverage/lcov-report/ public/coverage
    - mv site/ public/docs
    - mv docs/index.html public/index.html
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master


# Deploy
trigger_deploy:
  image: tutum/curl
  stage: release
  variables:
    GIT_STRATEGY: none
  only:
    - master
  script:
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form ref=master https://gitlab.com/api/v4/projects/Skn0tt%2FEntE-deployments/trigger/pipeline
