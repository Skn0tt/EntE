stages:
  - test:unit
  - build
  - test
  - generate
  - deploy
  - release

test:unit:
  image: node:9
  stage: test:unit
  script: "./ci/test_unit.sh"
  dependencies: []
  artifacts:
    paths:
      - coverage/lcov-report/
      - junit.xml

test:version:
  image:
    name: frapsoft/ts-node
    entrypoint: [""]
  stage: test:unit
  dependencies: []
  script: "./ci/test_version.sh"

build:api:
  image: skn0tt/dind-make
  stage: build
  dependencies: []
  services:
    - docker:stable-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script: "./ci/build_docker.sh api"
  
build:ui:
  image: skn0tt/dind-make
  stage: build
  dependencies: []
  services:
    - docker:stable-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script: "./ci/build_docker.sh ui"

build:nginx-proxy:
  image: skn0tt/dind-make
  stage: build
  dependencies: []
  services:
    - docker:stable-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script: "./ci/build_docker.sh nginx-proxy"
  

build:docker-app:
  image: docker:stable
  stage: build
  dependencies: []
  services:
    - docker:stable-dind
  script: "./ci/build_dockerapp.sh"

test:e2e:
  image: skn0tt/node-browsers-docker-app
  stage: test
  dependencies: []
  services:
    - name: docker:stable-dind
      alias: dind
  variables:
    BASE_URL: "http://dind:80"
    DOCKER_HOST: dind:2375
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script:
    - docker-app render -f tests/e2eConfig.yml --set API_VERSION=$CI_COMMIT_SHA --set UI_VERSION=$CI_COMMIT_SHA --set NGINX_PROXY_VERSION=$CI_COMMIT_SHA | docker-compose -f - up -d
    - BASE_URL=http://dind:80 ./ci/test_e2e.sh
    - docker-app render -f tests/e2eConfig.yml --set API_VERSION=$CI_COMMIT_SHA --set UI_VERSION=$CI_COMMIT_SHA --set NGINX_PROXY_VERSION=$CI_COMMIT_SHA | docker-compose -f - down
  artifacts:
    paths:
      - screenshots/
      - e2e.xml

sast:
  image: docker:stable
  stage: test
  dependencies: []
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths:
      - gl-sast-report.json

generate:docs:
  image: python
  stage: generate
  dependencies: []
  script: "./ci/generate_docs.sh"
  artifacts:
    paths:
      - site/

generate:allure:
  image: skn0tt/allure
  stage: generate
  dependencies:
    - test:unit
    - test:e2e
  script: "./ci/generate_allure.sh"
  artifacts:
    paths:
      - allure-report/

deploy:pages:
  image: debian
  stage: deploy
  only:
    - master
  dependencies:
    - test:unit
    - generate:allure
    - generate:docs
  script:
    - mkdir .public
    - mkdir .public/coverage .public/allure-report .public/docs
    - cp -R coverage/lcov-report/* .public/coverage/
    - cp -R site/* .public/docs/
    - cp -R allure-report/* .public/allure-report/
    - cp docs/index.html .public/index.html
    - mv .public public
  artifacts:
    paths:
      - public

deploy:images:
  image: docker
  stage: deploy
  dependencies: []
  services:
    - docker:stable-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
    - echo $DOCKER_HUB_PASSWORD | docker login -u skn0tt --password-stdin
  script: "./ci/publish_images.sh"

release:trigger_deployment:
  image: tutum/curl
  stage: release
  dependencies: []
  variables:
    GIT_STRATEGY: none
  environment:
    name: staging
    url: https://bull.simonknott.de
  only:
    - /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$/
  script:
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form "variables[NEW_VERSION]=$CI_COMMIT_TAG" --form ref=master https://gitlab.com/api/v4/projects/Skn0tt%2FEntE-deployments/trigger/pipeline
