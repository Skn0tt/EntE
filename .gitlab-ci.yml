stages:
  - test
  - build
  - test:e2e
  - generate
  - deploy
  - release

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

include:
  template: SAST.gitlab-ci.yml

sast:
  stage: test

test:unit:
  image: node:10
  stage: test
  script: "./scripts/ci/test_unit.sh"
  cache:
    key: "test-unit"
    paths:
      - node_modules/
  dependencies: []
  artifacts:
    paths:
      - coverage/lcov-report/
      - junit.xml
    reports:
      junit: junit.xml

test:tsc:
  image: node:10
  stage: test
  script: "./scripts/ci/test_tsc.sh"
  cache:
    key: "test-unit"
    paths:
      - node_modules/
  dependencies: []

test:version:
  image:
    name: node:10
    entrypoint: [""]
  stage: test
  dependencies: []
  script: "./scripts/ci/test_version.sh"

license_management:
  image:
    name: "registry.gitlab.com/gitlab-org/security-products/license-management:$CI_SERVER_VERSION_MAJOR-$CI_SERVER_VERSION_MINOR-stable"
    entrypoint: [""]
  stage: test
  allow_failure: true
  script:
    - /run.sh analyze .
  artifacts:
    paths: [gl-license-management-report.json]

build:api:
  image: skn0tt/dind-make:298476cb7a58ce49f9bdab4da93529a10e3c6c1ed5fd7264e6e36b726e11dfa8
  stage: build
  needs:
    - job: test:unit
      artifacts: false
    - job: test:tsc
      artifacts: false
  services:
    - docker:19.03.2-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script: "./scripts/ci/build_docker.sh api"

build:ui:
  image: skn0tt/dind-make:298476cb7a58ce49f9bdab4da93529a10e3c6c1ed5fd7264e6e36b726e11dfa8
  stage: build
  needs:
    - job: test:unit
      artifacts: false
    - job: test:tsc
      artifacts: false
  services:
    - docker:19.03.2-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script: "./scripts/ci/build_docker.sh ui"

build:docker-app:
  image: docker:19.03.5
  stage: build
  needs: []
  dependencies: []
  services:
    - docker:19.03.2-dind
  script: "./scripts/ci/build_dockerapp.sh"

test:e2e:
  image: skn0tt/node-browsers-docker-app:node-10-docker-app-v0.6.0
  stage: test:e2e
  needs:
    - job: build:api
      artifacts: false
    - job: build:ui
      artifacts: false
    - job: build:docker-app
      artifacts: false
  cache:
    key: "test-e2e"
    paths:
      - node_modules/
  services:
    - name: docker:19.03.2-dind
      alias: dind
  variables:
    BASE_URL: "http://dind:80"
    DOCKER_HOST: "tcp://dind:2375"
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script: ./scripts/ci/test_e2e.sh
  artifacts:
    when: always
    paths:
      - screenshots/
      - e2e.xml
      - tests/e2e/logs.txt
    reports:
      junit: e2e.xml

generate:test-report:
  image: skn0tt/allure:e251d33f2ea388f1e2ce97ad9968ba1f03f65d3e320c692dff6ac1d36f9e4ca0
  stage: generate
  needs:
    - test:unit
    - test:e2e
  script: "./scripts/ci/generate_allure.sh"
  artifacts:
    paths:
      - allure-report/

.now_deploy_template: &now_deploy_template
  image: node:10
  stage: deploy
  only:
    - master
  variables:
    NOW_SCOPE: "--scope ente"
    NOW_SECRET: "--token=$NOW_TOKEN"
  before_script:
    - yarn global add now@16.7.3

deploy:coverage:
  <<: *now_deploy_template
  dependencies:
    - test:unit
  script:
    # coverage/lcov-report contains line coverage report
    - NOW_DEPLOYMENT=$(now $NOW_SECRET $NOW_SCOPE --name coverage-report coverage/lcov-report/)
    - sleep 10
    - now $NOW_SECRET $NOW_SCOPE alias $NOW_DEPLOYMENT coverage-report.ente.app

deploy:test-report:
  <<: *now_deploy_template
  needs:
    - generate:test-report
  script:
    # allure-report/ contains report files
    - NOW_DEPLOYMENT=$(now $NOW_SECRET $NOW_SCOPE --name test-report allure-report)
    - sleep 10
    - now $NOW_SECRET $NOW_SCOPE alias $NOW_DEPLOYMENT test-report.ente.app

deploy:images:
  image: docker:19.03.5
  stage: deploy
  needs:
    - job: build:api
      artifacts: false
    - job: build:ui
      artifacts: false
    - job: build:docker-app
      artifacts: false
  services:
    - docker:19.03.5-dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
  script: "./scripts/ci/publish_images.sh"

release:trigger_deployment:
  image: tutum/curl
  stage: release
  dependencies: []
  variables:
    GIT_STRATEGY: none
  only:
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$/
  script:
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form "variables[NEW_VERSION]=$CI_COMMIT_TAG" --form ref=master https://gitlab.com/api/v4/projects/Skn0tt%2FEntE-deployments/trigger/pipeline
